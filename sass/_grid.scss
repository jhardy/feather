%cf {
  &:before, &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}

$feather-grid-width: 980 !default;
$feather-column-width: 78 !default;
$feather-column-count: 12 !default;
$feather-gutter-width: false !default;
$feather-namespace-seprator: "-" !default;
$feather-grid-seperator: "-" !default;

$feather-settings: (
  palm : (
    ratios: (3, 4),
    breakpoint: 20em,
    offset: false
  ),

  lap : (
    ratios : (3, 4, 8, 9, 12),
    breakpoint: 40em,
    offset: true
  ),

  desk: (
    ratios: (3, 4, 6, 12),
    breakpoint: 60em,
    offset: true
  ),

  large: (
    breakpoint: 100em,
    offset: false
  )
);


//$feather-grid: $feather-grid-width, $feather-column-width, $feather-column-count, $feather-gutter-width;


@function calculate-gutter($grid-width: $feather-grid-width, $column-width: $feather-column-width, $column-count: $feather-column-count, $gutter-width: $feather-gutter-width) {

  $total-column-width: $column-width * $column-count;
  $leftover-space: $grid-width - $total-column-width;

  @if $feather-gutter-width {
    @return $gutter-width;
  }
  @else {
    @return $leftover-space / ($column-count - 1);
  }
}


$feather-gutter-width: calculate-gutter() !global;
$feather-grid-unit: $feather-column-width + $feather-gutter-width !default;


// Full width of grid based on parameters above
$feather-full-grid: $feather-grid-unit * $feather-column-count;


/* Names for push and pull classes */
//$feather-include-offset: true !default;
$feather-offset-name: "offset" !default;

$feather-include-pull: true !default;
$feather-pull-name: "pull" !default;

$feather-default-float: left !default;


@function unit($number, $context: $feather-full-grid) {
   @return percentage($number / $context);
}


@mixin create-grid() {

  .grid-wrap {
    margin-left: unit(-$feather-gutter-width);;
    @extend %cf;
    .grid-wrap {
       margin-left: 0;
    }
  }

  .grid-item {
    float: left;
    width: 100%;
    padding-left: unit($feather-gutter-width);
  }




  @each $item in $feather-settings {
    $ratios: map-get(nth($item, 2), ratios);
    $namespace: nth($item, 1);
    $offset: map-get(nth($item, 2), offset);


    @if( type-of($ratios) != "null") {
      @media screen and (min-width: map-get(nth($item, 2), breakpoint)) {
        @include create-grid-classes($ratios, $namespace, $feather-namespace-seprator, $feather-grid-seperator);

        @if $offset {
          .#{$namespace}#{$feather-namespace-seprator}#{$feather-offset-name}-0 {
            margin-left: 0;
          }
          @for $i from 1 through $feather-column-count {
            .#{$namespace}#{$feather-namespace-seprator}#{$feather-offset-name}-#{$i} {
              @include offset($i);
            }
          }
        }
      }

    }
  }
}

@mixin create-grid-ratios($start, $end, $namespace, $namespace-seprator, $grid-seperator) {
  @for $i from $start to $end {

  $value: ($feather-grid-unit * ($i/$end));
    .#{$namespace}#{$namespace-seprator}#{$i}#{$grid-seperator}#{$end} { width: unit($i, $end); };
  }
}

@mixin create-grid-classes($ratios, $namespace, $namespace-seprator, $grid-seperator) {

  $count: nth($ratios, length($ratios));


  .#{$namespace}#{$namespace-seprator}full { width: 100%; }
  .#{$namespace}#{$namespace-seprator}half { width: 50%; }

  @each $ratio in $ratios {
    @include create-grid-ratios(1, $ratio, $namespace, $namespace-seprator, $grid-seperator);
  }


}

@mixin pull($count, $context: $feather-full-grid) {
  $value: ($feather-grid-unit * $count);
  margin-left:  unit($value * -1, $context);
}

@mixin offset($count, $context: $feather-full-grid) {
  $value: ($feather-grid-unit * $count);
  margin-left:  unit($value, $context);
}

@mixin bp($point, $type: min-width) {
  $val: map-get($feather-settings, $point);
  $bp: 0;

  @if ($val == "null") {
    $bp: map-get($val, breakpoint);
     } @else {
    $bp: $point;
  }

  @media screen and ($type: $bp) {
    @content;
  }
}

@mixin feather-debug() {
  @each $item in $feather-settings {
    $bp-name: nth($item, 1);

    $bp-size: map-get(nth($item, 2), breakpoint);


    @include bp($bp-name) {
      body:after {
         display: block;
         content: " Name: #{$bp-name}, Size: #{$bp-size}";
         position: fixed;
         right: 10px;
         top: 10px;
         padding: 20px 15px;
         background: rgba(#1f364e, 0.8);
         color: #fff;
         font-size: 14px;
         font-family: sans-serif;
         border-radius: 4px;

      }
    }


  }

  $gutter_percentage: unit(-$feather-gutter-width) * 10;
  $column_percentage: 100% + $gutter_percentage;

  body:before {
      content: "";
      display: block;
      position: fixed;
      left: 50%;
      top: 0;
      margin-left: -($feather-grid-width/2) * 1px;
      width: 100%;
      max-width: $feather-grid-width * 1px;
      height: 100%;
      background-image: linear-gradient(90deg, rgba(#f00, 0.5) $column_percentage, transparent $gutter_percentage);
      background-size: (unit($feather-grid-unit) +  unit(-$feather-gutter-width));

    }
}
