%cf {
  &:before, &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}


$feather-screen-small: 20em !default;
$feather-screen-medium: 38em !default;
$feather-sceen-med-large: 58em !default;
$feather-screen-large: 60em !default;


/* Type of grid, true false */
// $feather-fluid: true !default;
// $feather-max-width: true !default;

// $feather-column-count: 12 !default;
// $feather-column-width: 60 !default;
// $feather-gutter-width: 20 !default;

$feather-grid-width: 1200 !default;
$feather-column-width: 58 !default;
$feather-column-count: 18 !default;
$feather-gutter-width: false !default;


$feather-grid: $feather-grid-width, $feather-column-width, $feather-column-count, $feather-gutter-width;


@function calculate-gutter($grid-width: $feather-grid-width, $column-width: $feather-column-width, $column-count: $feather-column-count, $gutter-width: $feather-gutter-width) {

  $total-column-width: $column-width * $column-count;
  $leftover-space: $grid-width - $total-column-width;

  @if $feather-gutter-width {
    @return $gutter-width;
  }
  @else {
    @return $leftover-space / ($column-count - 1);
  }
}


$feather-gutter-width: calculate-gutter() !global;
$feather-grid-unit: $feather-column-width + $feather-gutter-width !default;


// Full width of grid based on parameters above
$feather-full-grid: $feather-grid-unit * $feather-column-count;


/* Names for push and pull classes */
// $feather-include-offset: true;
// $feather-offset-name: "offset" !default;

// $feather-include-pull: true;
// $feather-pull-name: "pull" !default;

// $feather-default-float: left !default;


@function unit($number, $context: $feather-full-grid) {
   @return percentage($number / $context);
}

$palm-grid-ratios: (3, 4);
$lap-grid-ratios:  (3, 4, 8);
$med-desk-grid-ratios:  (3);
$desk-grid-ratios: (3, 4, 14, 16, 18);

@mixin create-grid-ratios($start, $end, $namespace, $namespace-seprator, $grid-seperator) {
  @for $i from $start to $end {

  $value: ($feather-grid-unit * ($i/$end));

    [data-grid-#{$namespace}="#{$i}#{$grid-seperator}#{$end}"] {
      width: unit($i, $end);
    }
  }
}

@mixin create-grid-classes($ratios, $namespace, $namespace-seprator, $grid-seperator) {

  $count: nth($ratios, length($ratios));

  //.hide-on-#{$namespace} { display: none; }

  [data-grid-#{$namespace}="full"] { width: 100%; }
  [data-grid-#{$namespace}="half"] { width: 50%; }

  @each $ratio in $ratios {
    @include create-grid-ratios(1, $ratio, $namespace, $namespace-seprator, $grid-seperator);
  }

  ///@include create-grid-ratios(1, $count, $namespace, $grid-seperator);

}

[data-grid-wrap] {
  margin-left: unit(-$feather-gutter-width);
  @extend %cf;

  [data-grid-wrap] {
    margin-left: 0;
  }
}

[data-grid-item] {
  width: 100%;
  padding-left: unit($feather-gutter-width);
}


@include create-grid-classes($palm-grid-ratios, "palm", "-", "-");



@media screen and (min-width: $feather-screen-medium) {
  [data-grid-item] {
    float: left;
  }
  @include create-grid-classes($lap-grid-ratios, "lap", "-", "-");
}

@media screen and (min-width: $feather-sceen-med-large)  {
  @include create-grid-classes($med-desk-grid-ratios, "med-desk", "-", "-");
}

@media screen and (min-width: $feather-screen-large)  {
  @include create-grid-classes($desk-grid-ratios, "desk", "-", "-");
}
