/* Welcome to Compass.
 * In this file you should write your main styles. (or centralize your imports)
 * Import this file using the following HTML or equivalent:
 * <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css" /> */

/* apply a natural box layout model to all elements */


* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }

%cf {
  &:before, &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}


$feather-screen-small: 20em !default;
$feather-screen-medium: 30em !default;
$feather-screen-large: 57em !default;


/* Type of grid, true false */
$feather-fluid: true !default;
$feather-max-width: true !default;

// $feather-column-count: 12 !default;
// $feather-column-width: 60 !default;
// $feather-gutter-width: 20 !default;

$feather-grid-width: 1000 !default;
$feather-column-width: 65 !default;
$feather-column-count: 12 !default;
$feather-gutter-width: false !default;


$feather-grid: $feather-grid-width, $feather-column-width, $feather-column-count, $feather-gutter-width;


@function calculate-gutter($grid-width: $feather-grid-width, $column-width: $feather-column-width, $column-count: $feather-column-count, $gutter-width: $feather-gutter-width) {

  $total-column-width: $column-width * $column-count;
  $leftover-space: $grid-width - $total-column-width;

  @if $feather-gutter-width {
    @return $gutter-width;
  }
  @else {
    @return $leftover-space / ($column-count - 1);
  }
}


$feather-gutter-width: calculate-gutter();
$feather-grid-unit: $feather-column-width + $feather-gutter-width !default;


// Full width of grid based on parameters above
$feather-full-grid: $feather-grid-unit * $feather-column-count;


/* Names for push and pull classes */
$feather-include-offset: true;
$feather-offset-name: "offset" !default;

$feather-include-pull: true;
$feather-pull-name: "pull" !default;

$feather-default-float: left !default;


@function unit($number, $context: $feather-full-grid) {
  @if $feather-fluid {
    @return percentage($number / $context);
  }
  @else {
    @return unquote(($number / $context) + "px");
  }
}

$palm-grid-ratios: (3, 4);
$lap-grid-ratios:  (3, 4, 5, 6);
$desk-grid-ratios: (3, 4, 5, 6, 10, 12);

@mixin create-grid-ratios($start, $end, $namespace, $namespace-seprator, $grid-seperator) {
  @for $i from $start to $end {

  $value: ($feather-grid-unit * ($i/$end));

    .#{$namespace}#{$namespace-seprator}#{$i}#{$grid-seperator}#{$end} {
      width: percentage($i/$end);
    }
  }
}

@mixin create-grid-classes($ratios, $namespace, $namespace-seprator, $grid-seperator) {

  $count: nth($ratios, length($ratios));

  //.hide-on-#{$namespace} { display: none; }

  .#{$namespace}#{$namespace-seprator}full { width: 100%; }
  .#{$namespace}#{$namespace-seprator}half { width: 50%; }

  @each $ratio in $ratios {
    @include create-grid-ratios(1, $ratio, $namespace, $namespace-seprator, $grid-seperator);
  }

  ///@include create-grid-ratios(1, $count, $namespace, $grid-seperator);

}




.main-site {
  max-width: 1000px;
  margin: 0 auto;
}
.grid-wrap {
  margin-left: unit(-$feather-gutter-width);
  @extend %cf;
}

.grid {
  float: left;
  padding-left: unit($feather-gutter-width);
}

.grid p {
  background: red;
}

.grid-wrap-inline {
  margin-left: unit(-$feather-gutter-width);
  font-size: 0;
}

.grid-inline {

  width: 100%;
  padding-left: unit($feather-gutter-width);
  font-size: 16px;
  display: inline-block;
  zoom: 1;
  *display: inline;
}

.grid-inline p {
  background: red;
}


@include create-grid-classes($palm-grid-ratios, "palm", "-", "-");

@media screen and (min-width: $feather-screen-medium) {
  @include create-grid-classes($lap-grid-ratios, "lap", "-", "-");
}

@media screen and (min-width: $feather-screen-large)  {
  @include create-grid-classes($desk-grid-ratios, "desk", "-", "-");
}

