%cf {
  &:before, &:after {
    content: " "; /* 1 */
    display: table; /* 2 */
  }

  &:after {
    clear: both;
  }
}


$feather-grid-width: 980 !default;
$feather-column-width: 78 !default;
$feather-column-count: 12 !default;
$feather-gutter-width: false !default;
$feather-namespace-seprator: "_" !default;
$feather-grid-seperator: "-" !default;

$feather-settings: (
  palm : (
      ratios: (3, 4),
      breakpoint: 20em
  ),

  lap : (
    ratios : (3, 4, 8, 9, 12),
    breakpoint: 40em
  ),

  desk: (
    ratios: (3, 4, 9, 12),
    breakpoint: 60em
  ),

  large: (
    breakpoint: 100em
  )
);


@mixin bp($point, $type: min-width) {
  @media screen and ($type: map-get(map-get($feather-settings, $point), breakpoint)) {
    @content;
  }
}




//$feather-grid: $feather-grid-width, $feather-column-width, $feather-column-count, $feather-gutter-width;


@function calculate-gutter($grid-width: $feather-grid-width, $column-width: $feather-column-width, $column-count: $feather-column-count, $gutter-width: $feather-gutter-width) {

  $total-column-width: $column-width * $column-count;
  $leftover-space: $grid-width - $total-column-width;

  @if $feather-gutter-width {
    @return $gutter-width;
  }
  @else {
    @return $leftover-space / ($column-count - 1);
  }
}




$feather-gutter-width: calculate-gutter() !global;
$feather-grid-unit: $feather-column-width + $feather-gutter-width !default;


// Full width of grid based on parameters above
$feather-full-grid: $feather-grid-unit * $feather-column-count;


/* Names for push and pull classes */
// $feather-include-offset: true;
// $feather-offset-name: "offset" !default;

// $feather-include-pull: true;
// $feather-pull-name: "pull" !default;

// $feather-default-float: left !default;


@function unit($number, $context: $feather-full-grid) {
   @return percentage($number / $context);
}

$palm-grid-ratios: (3, 4);
$lap-grid-ratios:  (3, 4, 8);
$desk-grid-ratios: (3, 4, 14, 16);


@mixin create-grid() {

  .grid-wrap {
    margin-left: unit(-$feather-gutter-width);
    @extend %cf;
    .grid-wrap {
       margin-left: 0;
    }
  }

  .grid-item {
    float: left;
    width: 100%;
    padding-left: unit($feather-gutter-width);
  }

  @each $item in $feather-settings {
    $ratios: map-get(nth($item, 2), ratios);

    @if( type-of($ratios) != "null") {
      @media screen and (min-width: map-get(nth($item, 2), breakpoint)) {
        @include create-grid-classes($ratios, nth($item, 1), $feather-namespace-seprator, $feather-grid-seperator);
      }

    }
  }
}

@mixin create-grid-ratios($start, $end, $namespace, $namespace-seprator, $grid-seperator) {
  @for $i from $start to $end {

  $value: ($feather-grid-unit * ($i/$end));
    .#{$namespace}#{$namespace-seprator}#{$i}#{$grid-seperator}#{$end} { width: unit($i, $end); };
  }
}

@mixin create-grid-classes($ratios, $namespace, $namespace-seprator, $grid-seperator) {

  $count: nth($ratios, length($ratios));


  .#{$namespace}#{$namespace-seprator}full { width: 100%; }
  .#{$namespace}#{$namespace-seprator}half { width: 50%; }

  @each $ratio in $ratios {
    @include create-grid-ratios(1, $ratio, $namespace, $namespace-seprator, $grid-seperator);
  }

}


@include create-grid();


